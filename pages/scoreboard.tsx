import type { NextPage } from "next";
import Head from "next/head";
import Rules from "../components/onboarding/Rules";
import { useQuery } from "../convex/_generated";
import Onboarding from "../components/onboarding/Onboarding";
import { Team } from "../util/common";
import { SCOREBOARD } from "../util/config";
import { useEffect, useState } from "react";

const TeamCard: React.FC<{ team: Team }> = ({ team }) => {
  return (
    <div className="w-full border border-slate-200 rounded-xl py-8 px-10 flex justify-between items-center transition">
      <div className="flex-1 flex flex-col gap-y-2 text-slate-700">
        <div className="text-left text-4xl font-bold">Team {team.tnumber}</div>
        <div className="text-left text-2xl font-semibold text-slate-400">
          {team.name}
        </div>
      </div>
      <div>
        <div
          className={`rounded-full h-[30px] w-[30px] ${
            team.claimed ? `bg-green-500` : `bg-red-500`
          } transition`}
        ></div>
      </div>
    </div>
  );
};

// TODO: Add direct and pounce indicators
// fetch answers for current slide, render from there

const Scoreboard: NextPage = () => {
  const teams: Team[] | undefined = useQuery("allTeams");
  const quizStarted = useQuery("quizStarted");
  const [maxPoints, setMaxPoints] = useState(0);

  useEffect(() => {
    setMaxPoints(teams?.sort((a, b) => b.points - a.points)[0].points ?? 0);
  }, [teams]);

  return (
    <div>
      <Head>
        <title>Score | ExQuiz</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="h-screen w-screen p-10 flex flex-col items-center justify-center">
        <div className="mb-10">
          <h1 className="text-6xl font-bold text-center text-slate-700 mb-1">
            {SCOREBOARD.QUIZNAME}
          </h1>
          <div className="text-3xl font-semibold text-center text-slate-500">
            Scoreboard
          </div>
        </div>
        {quizStarted?.value === true ? (
          <div
            className={`max-w-6xl w-full h-full pt-10 mx-auto flex justify-center gap-x-10`}
          >
            {teams?.map(({ points, tnumber }, i) => (
              <div key={i} className="flex flex-col items-center">
                <div className="flex-1 h-full flex flex-col justify-end">
                  {points === 0 ? (
                    <div>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="h-[80px] w-[80px] text-exun/30"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                        strokeWidth={2}
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
                        />
                      </svg>
                    </div>
                  ) : (
                    <div
                      className="bg-exun rounded-xl w-[80px]"
                      style={{
                        height: String((points / maxPoints) * 100) + `%`,
                        transition: "height 300ms ease",
                      }}
                    ></div>
                  )}
                </div>
                <div className="p-5 flex flex-col gap-y-1 items-center justify-center">
                  <div className="text-3xl font-bold text-slate-600">
                    Team {tnumber}
                  </div>
                  <div className="text-2xl font-semibold text-slate-400">
                    {points}
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="max-w-6xl w-full mx-auto grid grid-cols-2 gap-3">
            {teams?.map((team, i) => (
              <TeamCard team={team} key={i} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default Scoreboard;
